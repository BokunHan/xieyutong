---
description: 
globs: 
alwaysApply: false
---
---
description: 规范高效使用 Git 的最佳实践，包括代码组织、提交策略、分支模型与协作流程等。
---

# Git 最佳实践

## Critical Rules

### 提交策略
- **原子性提交：** 保持每次提交小而专注。每个提交应只包含一个逻辑变更，便于理解历史和回滚。
- **描述性提交信息：** 编写清晰、简明、信息量丰富的提交信息。说明"为什么"要改，而不仅仅是"改了什么"。建议使用统一格式（如祈使句："修复 bug"，"新增功能"），可参考 Conventional Commits。
- **频繁提交：** 尽早、频繁地提交，避免丢失工作进度，便于追踪变更。
- **避免提交有问题的代码：** 提交前确保代码能编译且通过基本测试，不要将已知有问题的代码提交到共享分支。
- **签名提交（可选但推荐）：** 使用 GPG 对提交进行签名，验证提交的真实性，尤其在协作项目中。

### 分支模型
- **使用功能分支：** 每个新功能或 bug 修复都应新建分支，便于隔离变更和代码评审。
- **采用分支管理模型：** 推荐采用 Gitflow、GitHub Flow 等标准分支模型，统一管理开发、发布和热修复流程。
- **保持分支短生命周期：** 分支应尽快合并回主开发分支，避免长期存在导致合并困难。
- **定期同步主分支：** 功能分支应定期 rebase 或 merge 主分支（如 main、develop），避免后期大规模冲突。
- **保护主分支：** 禁止直接向主分支（如 main、master）提交，所有变更应通过 Pull Request/Merge Request 合并。

### 代码组织（与 Git 相关）
- **统一格式化：** 使用 linter/formatter（如 Prettier、Black、ESLint）统一代码风格，保证 diff 清晰、代码评审高效。
- **模块化设计：** 拆分为小而独立的模块，提升可维护性和可读性，便于在 Git 历史中追踪变更。
- **清晰接口定义：** 明确模块间接口，降低耦合，便于重构和功能扩展。
- **减少全局状态：** 尽量避免全局变量，降低调试难度和意外影响。
- **文档完善：** 通过注释、文档字符串等方式，清晰说明代码目的，便于理解历史变更。

### 协作与代码评审
- **Pull Request/Merge Request：** 所有代码变更都应通过 PR/MR 合并到共享分支，便于代码评审和讨论。
- **代码评审清单：** 制定评审清单，确保评审一致且覆盖功能、风格、测试、安全等关键点。
- **建设性反馈：** 评审时应给出具体、可操作的建议，注重代码改进而非个人批评。
- **及时响应反馈：** 及时回复和处理评审意见。
- **结对编程：** 对于复杂或关键任务，可采用结对编程提升质量和知识共享。

### 忽略文件与目录
- **.gitignore：** 维护完善的 .gitignore 文件，排除不应被 Git 跟踪的文件（如构建产物、日志、依赖、密钥、IDE 配置等）。可参考各技术栈的模板。
- **全局 .gitignore：** 配置全局 gitignore，排除所有仓库都不应跟踪的文件（如 .DS_Store 等操作系统文件）。

### 机密与敏感信息管理
- **严禁提交机密信息：** 绝不将密码、API 密钥、私钥等敏感信息提交到仓库，即使是私有分支。
- **安全存储方式：** 通过环境变量、专用密钥管理工具（如 Vault、AWS Secrets Manager、Doppler）或加密配置文件（如 git-secret）管理敏感信息，优先使用外部管理。

### 子模块与子树
- **谨慎使用：** 仅在必要时使用 Git 子模块或子树，这会增加克隆、更新和协作的复杂度。
- **充分理解：** 在使用前充分了解其行为和影响。
- **优先替代方案：** 通常优先考虑包管理器或构建系统依赖。

### 大文件存储（LFS）
- **用于大文件：** 使用 Git LFS 管理大体积二进制文件（如图片、视频、数据集、编译库），保持主仓库体积小巧高效。
- **正确配置 LFS：** 在提交大文件前，先用 git lfs track 配置好。

### 回退与重置
- **理解命令差异：** 明确理解 git revert、git reset、git checkout 的区别和影响。
- **谨慎使用 reset：** 尤其是 --hard，可能导致数据丢失，切勿在共享分支上使用。
- **优先使用 revert：** 对已推送到远程的变更，优先用 git revert 生成反向提交，保留历史。

### 版本标签
- **标记重要节点：** 用 tag 标记发布、里程碑或重要提交。
- **语义化版本：** 遵循语义化版本（SemVer）规范（如 v1.2.3）。
- **注解标签：** 优先使用注解标签（git tag -a），可存储更多元数据并支持签名。

### 合并冲突处理
- **理解冲突来源：** 不要盲目接受变更，先理解冲突原因。
- **沟通协作：** 多人协作时，主动与相关开发者沟通。
- **使用合并工具：** 善用图形化合并工具辅助解决冲突。
- **彻底测试：** 冲突解决后务必全面测试，确保功能正常。

### 仓库维护
- **定期清理：** 定期删除本地和远程的无用分支（git branch -d，git push origin --delete <branch>）。
- **仓库优化（git gc）：** 偶尔运行 git gc 优化本地仓库，Git 通常会自动处理。

### CI/CD 集成
- **自动化检查：** 集成 CI/CD 流水线，自动在提交或 PR 时运行测试、linter、构建。
- **每次推送/PR 都运行测试：** 及时发现回归问题。

### 常见陷阱
- **提交机密/大文件：** 最严重的错误。正确使用 .gitignore 和 LFS。
- **合并冲突地狱：** 多由长期分支或沟通不足导致。保持分支短小并及时同步。
- **误操作丢失工作：** 错误使用 git reset 或 git checkout。操作前务必理解命令。
- **忽略 .gitignore：** 忘记将生成文件或密钥加入 .gitignore。

### 工具与环境
- **选择合适的客户端：** 选择最适合自己的 Git 客户端（命令行、GUI、IDE 集成）。
- **善用 IDE 集成：** 现代 IDE 通常有优秀的 Git 集成，建议熟练掌握。
- **使用可靠的远程托管：** 选择可靠的远程仓库平台（如 Gitee、GitHub等）。



